In Python, a tuple is an ordered, immutable collection of items. Tuples are similar to lists, but they cannot be changed after they are created (i.e., they are immutable).

üîπ Creating a Tuple

# Empty tuple
empty_tuple = ()

# Tuple with multiple elements
my_tuple = (1, 2, 3, 'a', 'b')

print(my_tuple[0])   # 1
print(my_tuple[-1])  # 'b'

# Tuple without parentheses (not recommended for readability)
another_tuple = 1, 2, 3

# Single-element tuple (note the comma)
single_element = (42,)

t1 = ()                  # Empty tuple
t2 = (5,)                # Single element (comma required)
t3 = (1, 2, 3)           # Multiple elements
t4 = tuple([1, 2, 3])    # From a list



üîπ Tuple Operations

# Length
len(my_tuple)  # 5

# Concatenation
t1 = (1, 2)
t2 = (3, 4)
t3 = t1 + t2  # (1, 2, 3, 4)

# Repetition
t4 = t1 * 3   # (1, 2, 1, 2, 1, 2)

# Membership
5 in t3       # Flase


üîπ Immutability

my_tuple[1] = 99  # ‚ùå Error: 'tuple' object does not support item assignment


üîπ Tuple Packing and Unpacking in Python
Python provides a convenient way to group and extract values using tuple packing and unpacking.

‚úÖ Tuple Packing
Packing means putting multiple values into a single tuple.

# Packing values into a tuple
person = ("Alice", 30, "Engineer")
print(person)  # Output: ('Alice', 30, 'Engineer')

You can pack without parentheses too:

info = "Bob", 25, "Designer"
print(info)  # Output: ('Bob', 25, 'Designer')

‚úÖ Tuple Unpacking
Unpacking means extracting values from a tuple into individual variables.

name, age, profession = person
print(name)       # Output: Alice
print(age)        # Output: 30
print(profession) # Output: Engineer

‚ö†Ô∏è The number of variables must match the number of elements in the tuple.

‚úÖ Extended Unpacking (Python 3.0+)
You can use * to capture excess values:

numbers = (1, 2, 3, 4, 5)
a, b, *rest = numbers

print(a)    # Output: 1
print(b)    # Output: 2
print(rest) # Output: [3, 4, 5]

*start, end = numbers
print(start)  # Output: [1, 2, 3, 4]
print(end)    # Output: 5


‚úÖ Use Cases
Swapping values:

x, y = 10, 20
x, y = y, x
print(x, y)  # Output: 20 10

------------------------------------------------------------------------------


| Operation     | Example                 | Output / Description             |
| ------------- | ----------------------- | -------------------------------- |
| Indexing      | `t3[0]`                 | Access element by index (`1`)    |
| Slicing       | `t3[1:3]`               | `(2, 3)`                         |
| Concatenation | `(1, 2) + (3, 4)`       | `(1, 2, 3, 4)`                   |
| Repetition    | `("a",) * 3`            | `('a', 'a', 'a')`                |
| Membership    | `2 in t3`               | `True`                           |
| Length        | `len(t3)`               | `3`                              |
| Count         | `t3.count(2)`           | Number of times 2 appears        |
| Index         | `t3.index(3)`           | First index of value `3`         |
| Looping       | `for x in t3: print(x)` | Iterates through all tuple items |

--------------------------------------------------------------------------

| Feature     | Tuple                | List         |
| ----------- | -------------------- | ------------ |
| Syntax      | `(1, 2, 3)`          | `[1, 2, 3]`  |
| Mutable     | ‚ùå No                 | ‚úÖ Yes        |
| Performance | ‚úÖ Faster (read-only) | ‚ùå Slower     |
| Use Case    | Fixed data           | Dynamic data |



