Dynamic Programming (DP) is used to solve complex problems by breaking them down into simpler subproblems and storing the results of those subproblems to avoid redundant computations.

Key Concepts of Dynamic Programming
Overlapping Subproblems:
The problem can be broken into smaller subproblems that repeat multiple times.

Optimal Substructure:
The optimal solution of the problem can be constructed from optimal solutions of its subproblems.

Memoization (Top-Down DP):
Store the result of expensive recursive calls and reuse them when the same inputs occur again.

Tabulation (Bottom-Up DP):
Solve all related subproblems first and use their answers to build up the solution to the original problem.

| Problem                     | Description                                          |
| --------------------------- | ---------------------------------------------------- |
| Fibonacci Numbers           | `F(n) = F(n-1) + F(n-2)`                             |
| 0/1 Knapsack                | Maximize value with a weight constraint              |
| Longest Common Subsequence  | Find the longest subsequence common to two sequences |
| Edit Distance (Levenshtein) | Minimum operations to convert one string to another  |
| Coin Change                 | Minimum coins to make a certain amount               |
| Matrix Chain Multiplication | Find the most efficient way to multiply matrices     |


When to Use DP
If a naive recursive solution leads to repeated calculations

If brute-force is too slow and the problem has optimal substructure

When you can define states and transitions between them


🔢 Example 1: Fibonacci (DP in Java)
✅ Top-Down (Memoization)

import java.util.HashMap;

public class FibonacciMemo {
    static HashMap<Integer, Integer> memo = new HashMap<>();

    public static int fib(int n) {
        if (n <= 1) return n;
        if (memo.containsKey(n)) return memo.get(n);

        int result = fib(n - 1) + fib(n - 2);
        memo.put(n, result);
        return result;
    }

    public static void main(String[] args) {
        System.out.println("Fibonacci of 10: " + fib(10)); // Output: 55
    }
}


✅ Bottom-Up (Tabulation)

public class FibonacciTab {
    public static int fib(int n) {
        if (n <= 1) return n;

        int[] dp = new int[n + 1];
        dp[0] = 0;
        dp[1] = 1;

        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }

        return dp[n];
    }

    public static void main(String[] args) {
        System.out.println("Fibonacci of 10: " + fib(10)); // Output: 55
    }
}



🎒 0/1 Knapsack Problem
🔍 Problem Statement
You are given:

A set of n items, each with a weight and value.

A knapsack (bag) with a capacity W.

Goal: Maximize the total value you can put into the knapsack without exceeding the capacity.

Each item can be either included or not (hence "0/1" Knapsack) — you can't take fractional items.

int[] weights = {1, 3, 4, 5};
int[] values =  {1, 4, 5, 7};
int capacity = 7;


| Item | Weight | Value |
| ---- | ------ | ----- |
| 1    | 1      | 1     |
| 2    | 3      | 4     |
| 3    | 4      | 5     |
| 4    | 5      | 7     |


public class KnapsackDP {
    public static int knapsack(int[] weights, int[] values, int W, int n) {
        int[][] dp = new int[n + 1][W + 1];

        for (int i = 0; i <= n; i++) {
            for (int w = 0; w <= W; w++) {
                if (i == 0 || w == 0) {
                    dp[i][w] = 0;
                } else if (weights[i - 1] <= w) {
                    dp[i][w] = Math.max(
                        values[i - 1] + dp[i - 1][w - weights[i - 1]],
                        dp[i - 1][w]
                    );
                } else {
                    dp[i][w] = dp[i - 1][w];
                }
            }
        }

        return dp[n][W];
    }

    public static void main(String[] args) {
        int[] weights = {1, 3, 4, 5};
        int[] values = {1, 4, 5, 7};
        int capacity = 7;
        int n = weights.length;

        System.out.println("Maximum value in Knapsack: " + knapsack(weights, values, capacity, n)); // Output: 9
    }
}



Output:
Maximum value in Knapsack: 9

✅ Why is the output 9?
Let's analyze combinations within 7 weight capacity:

Items 2 and 3:
Weight = 3 + 4 = 7
Value = 4 + 5 = 9 ✅

Item 4 alone:
Weight = 5
Value = 7 ❌ (less than 9)

Items 1, 2, and 4:
Weight = 1 + 3 + 5 = 9 ❌ (too heavy)

So the best value you can carry without exceeding capacity 7 is from items 2 and 3, giving a total value of 9.

