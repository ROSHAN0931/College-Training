A greedy algorithm is a problem-solving approach that builds up a solution piece by piece, always choosing the option that offers the most immediate benefit (the "greedy" choice), without considering the global consequences.

Key Characteristics:
Local optimization: Makes the best choice at each step.
No backtracking: Once a choice is made, it’s never reconsidered.
Fast and simple: Usually has a lower time complexity than other methods like dynamic programming.
May not be optimal: Doesn’t always produce the globally optimal solution.

Common Examples:
Activity Selection Problem

Goal: Select the maximum number of non-overlapping activities.
Greedy choice: Always pick the next activity with the earliest finish time.

Huffman Coding

Goal: Compress data using variable-length codes.
Greedy choice: Merge the two lowest-frequency symbols first.

Fractional Knapsack Problem

Goal: Maximize value in a knapsack allowing fractions.
Greedy choice: Take items with the highest value/weight ratio first.

Dijkstra’s Algorithm (with priority queue)

Goal: Find the shortest path in a weighted graph (non-negative weights).
Greedy choice: Always expand the nearest unvisited node.

When to Use:
Greedy algorithms are ideal when:

The problem exhibits the greedy choice property: A globally optimal solution can be arrived at by choosing the local optimum at each step.
The problem has optimal substructure: An optimal solution to the problem contains optimal solutions to its subproblems.


Problem: Minimum Coins
You are given some coin denominations (e.g., 1, 5, 10, 25), and a total amount. Use the fewest coins possible to make that amount.

Note: This greedy version only works correctly when denominations are such that a greedy solution is optimal (e.g., U.S. coin denominations).

Example
Input:
Coins: [25, 10, 5, 1]

Amount: 30

Greedy Idea:
Always pick the largest coin that doesn't exceed the remaining amount.

import java.util.*;

public class Main{
    
    public static void greedy(int[] amount,int n,int target){
        List<Integer> result = new ArrayList<>();
        for(int coin : amount){
            while (target >= coin){
                target = target - coin;
                result.add(coin);
            } 
        }
        System.out.println(result);
    }
    
    public static void main (String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int amount[] = new int[n];
        for(int i=0;i<n;i++){
            amount[i]=in.nextInt();
        }
        int target = in.nextInt();
        
        greedy(amount,n,target);
    }
}


Problem:
You have a list of activities, each with a start and end time. You want to attend as many activities as possible without overlapping.
Pick the activity that finishes earliest because that leaves the most time available for other activities.

int[] start = {1, 3, 0, 5, 8, 5};
int[] end =   {2, 4, 6, 7, 9, 9};


Selected activities:
(1, 2)
(3, 4)
(5, 7)
(8, 9)


CODE : 

import java.util.*;

public class ActivitySelection {
    public static void main(String[] args) {
        int[] start = {1, 3, 0, 5, 8, 5};
        int[] end =   {2, 4, 6, 7, 9, 9};
        int n = start.length;

        // Create an array of indices to sort by end time
        Integer[] index = new Integer[n];
        for (int i = 0; i < n; i++) index[i] = i;

        // Sort indices based on activity end times
        Arrays.sort(index, Comparator.comparingInt(i -> end[i]));

//Arrays.sort(...): Sorts the array.
//index: The array to sort (contains 0, 1, 2, ..., n–1).
//Comparator.comparingInt(...): Tells how to compare elements.
//i -> end[i]: For each index i, use end[i] as the value to sort by.
//So this line sorts activity indices based on their end time, in ascending order.

        System.out.println("Selected activities:");
        int lastEnd = -1;  // Track end time of last selected activity

        // Select activities greedily
        for (int i : index) {
            if (start[i] >= lastEnd) {
                System.out.println("(" + start[i] + ", " + end[i] + ")");
                lastEnd = end[i];
            }
        }
    }
}

